import fs from "fs";
import camelCase from "lodash/camelCase";
import path from "path";

class Query {
  constructor(private queryName: string) {}

  pre() {
    return `${this.queryName}Document,
  ${this.queryName}QueryVariables`;
  }

  main() {
    return `${camelCase(this.queryName)} = async (vars: ${
      this.queryName
    }QueryVariables) => this.sdk.query(${this.queryName}Document, vars);`;
  }
}
//
const GENERATED_QUERIES_DIRECTORY = path.join(
  __dirname,
  "..",
  "resources",
  "generated_queries",
);
class SDK {
  private queries: Query[] = [];

  constructor() {
    this.initialize();
  }
  // TODO: @bradens mutations
  // mutations: Mutation[]
  //
  initialize() {
    // crawl the generatedQueries and then create the typescript code for that query.
    const files = fs.readdirSync(GENERATED_QUERIES_DIRECTORY);
    console.log(`[SDK] initializing with ${files.length} queries`);

    for (const file of files) {
      this.queries.push(new Query(path.basename(file, ".graphql")));
    }
  }

  print(): string {
    return `import {
${this.queries.map((q) => "  " + q.pre()).join(",\n")}
} from "./autogenerated/graphql";
      import { Codex } from "./index";

      export class Query {
        constructor(private sdk: Codex) {}
        ${this.queries.map((q) => q.main()).join("\n")}
      }
    `;
  }

  output() {
    fs.writeFileSync(
      path.join(__dirname, "../", "sdk", "Query.ts"),
      this.print(),
      "utf8",
    );
  }
}

async function run() {
  const sdk = new SDK();
  sdk.output();
}

run().then(() => process.exit());
