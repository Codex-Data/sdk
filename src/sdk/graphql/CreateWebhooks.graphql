mutation CreateWebhooks($input: CreateWebhooksInput!) {
  createWebhooks(input: $input) {
    priceWebhooks {
      id
      webhookType
      name
      created
      alertRecurrence
      callbackUrl
      status
      groupId
      conditions {
        ... on PriceEventWebhookCondition {
          tokenAddressPriceEventWebhookCondition: tokenAddress {
            eq
          }
          networkIdPriceEventWebhookCondition: networkId {
            eq
          }
          priceUsd {
            gt
            gte
            lt
            lte
            eq
          }
        }
        ... on TokenPairEventWebhookCondition {
          tokenAddress {
            eq
          }
          networkId {
            oneOf
          }
          swapValue {
            gt
            gte
            lt
            lte
            eq
          }
          maker {
            eq
          }
          pairAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          eventType {
            oneOf
          }
        }
        ... on NftEventWebhookCondition {
          networkId {
            oneOf
          }
          maker {
            eq
          }
          contractAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          tokenId {
            eq
          }
          tokenAddress {
            eq
          }
          individualBaseTokenPrice {
            gt
            gte
            lt
            lte
            eq
          }
          eventType {
            eq
          }
          fillSource {
            oneOf
          }
        }
        ... on RawTransactionWebhookCondition {
          networkId {
            oneOf
          }
          to {
            eq
          }
          from {
            eq
          }
          toOrFrom {
            eq
          }
          input {
            contains
            notContains
          }
          ignoreTokenPairEvents
          ignoreNftEvents
        }
      }
      retrySettings {
        maxTimeElapsed
        minRetryDelay
        maxRetryDelay
        maxRetries
      }
      bucketId
      bucketSortkey
    }
    tokenPairEventWebhooks {
      id
      webhookType
      name
      created
      alertRecurrence
      callbackUrl
      status
      groupId
      bucketId
      bucketSortkey
      conditions {
        ... on PriceEventWebhookCondition {
          tokenAddressPriceEventWebhookCondition: tokenAddress {
            eq
          }
          networkIdPriceEventWebhookCondition: networkId {
            eq
          }
          priceUsd {
            gt
            gte
            lt
            lte
            eq
          }
        }
        ... on TokenPairEventWebhookCondition {
          tokenAddress {
            eq
          }
          networkId {
            oneOf
          }
          swapValue {
            gt
            gte
            lt
            lte
            eq
          }
          maker {
            eq
          }
          pairAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          eventType {
            oneOf
          }
        }
        ... on NftEventWebhookCondition {
          networkId {
            oneOf
          }
          maker {
            eq
          }
          contractAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          tokenId {
            eq
          }
          tokenAddress {
            eq
          }
          individualBaseTokenPrice {
            gt
            gte
            lt
            lte
            eq
          }
          eventType {
            eq
          }
          fillSource {
            oneOf
          }
        }
        ... on RawTransactionWebhookCondition {
          networkId {
            oneOf
          }
          to {
            eq
          }
          from {
            eq
          }
          toOrFrom {
            eq
          }
          input {
            contains
            notContains
          }
          ignoreTokenPairEvents
          ignoreNftEvents
        }
      }
      retrySettings {
        maxTimeElapsed
        minRetryDelay
        maxRetryDelay
        maxRetries
      }
    }
    nftEventWebhooks {
      id
      webhookType
      name
      created
      alertRecurrence
      callbackUrl
      status
      groupId
      bucketId
      bucketSortkey
      retrySettings {
        maxTimeElapsed
        minRetryDelay
        maxRetryDelay
        maxRetries
      }
      conditions {
        ... on PriceEventWebhookCondition {
          tokenAddressPriceEventWebhookCondition: tokenAddress {
            eq
          }
          networkIdPriceEventWebhookCondition: networkId {
            eq
          }
          priceUsd {
            gt
            gte
            lt
            lte
            eq
          }
        }
        ... on TokenPairEventWebhookCondition {
          tokenAddress {
            eq
          }
          networkId {
            oneOf
          }
          swapValue {
            gt
            gte
            lt
            lte
            eq
          }
          maker {
            eq
          }
          pairAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          eventType {
            oneOf
          }
        }
        ... on NftEventWebhookCondition {
          networkId {
            oneOf
          }
          maker {
            eq
          }
          contractAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          tokenId {
            eq
          }
          tokenAddress {
            eq
          }
          individualBaseTokenPrice {
            gt
            gte
            lt
            lte
            eq
          }
          eventType {
            eq
          }
          fillSource {
            oneOf
          }
        }
        ... on RawTransactionWebhookCondition {
          networkId {
            oneOf
          }
          to {
            eq
          }
          from {
            eq
          }
          toOrFrom {
            eq
          }
          input {
            contains
            notContains
          }
          ignoreTokenPairEvents
          ignoreNftEvents
        }
      }
    }
    rawTransactionWebhooks {
      id
      webhookType
      name
      created
      alertRecurrence
      callbackUrl
      status
      groupId
      bucketId
      bucketSortkey
      conditions {
        ... on PriceEventWebhookCondition {
          tokenAddressPriceEventWebhookCondition: tokenAddress {
            eq
          }
          networkIdPriceEventWebhookCondition: networkId {
            eq
          }
          priceUsd {
            gt
            gte
            lt
            lte
            eq
          }
        }
        ... on TokenPairEventWebhookCondition {
          tokenAddress {
            eq
          }
          networkId {
            oneOf
          }
          swapValue {
            gt
            gte
            lt
            lte
            eq
          }
          maker {
            eq
          }
          pairAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          eventType {
            oneOf
          }
        }
        ... on NftEventWebhookCondition {
          networkId {
            oneOf
          }
          maker {
            eq
          }
          contractAddress {
            eq
          }
          exchangeAddress {
            eq
          }
          tokenId {
            eq
          }
          tokenAddress {
            eq
          }
          individualBaseTokenPrice {
            gt
            gte
            lt
            lte
            eq
          }
          eventType {
            eq
          }
          fillSource {
            oneOf
          }
        }
        ... on RawTransactionWebhookCondition {
          networkId {
            oneOf
          }
          to {
            eq
          }
          from {
            eq
          }
          toOrFrom {
            eq
          }
          input {
            contains
            notContains
          }
          ignoreTokenPairEvents
          ignoreNftEvents
        }
      }
      retrySettings {
        maxTimeElapsed
        minRetryDelay
        maxRetryDelay
        maxRetries
      }
    }
  }
}
